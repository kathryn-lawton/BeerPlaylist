@model BeerPlaylist.ViewModels.SurveyResultsViewModel

@{
    ViewBag.Title = "Results";
}

<h2>Results</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.BeerType)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BeerType.Type)
        </dd>

        <dt>
            Recommended Beer:
        </dt>

        <dd>
            <ul>
            @foreach(var item in Model.Beers)
            {
                <li>
                    <p>
                        @item.Name ,
                        $@item.Price ,
                        @item.ABV %
                    </p>
                </li>
            }
            </ul>
        </dd>
    </dl>
</div>

<input id="youtubeVideoId" hidden value="@Model.BeerType.YoutubeId" />

<div>
    <center>
        <div id="player"></div>
    </center>

    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var videoId = document.getElementById('youtubeVideoId').value;
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                videoId: videoId,
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
                setTimeout(stopVideo, 20000);
                done = true;
            }
        }
        function stopVideo() {
            player.stopVideo();
        }
    </script>

    @*<script>
            var tag = document.createElement('script');

            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

            var videoId = document.getElementById('youtubeVideoId').value;
            console.log(videoId);
            var player;
            function onYoutubeIframeAPIReady() {
                console.log("This is called");
                player = new YT.Player('player', {
                    height: '390',
                    width: '640',
                    videoId: videoId, // Add the video id here in C#
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            }

            function onPlayerReady(event) {
                event.target.playVideo();
            }

            var done = false;
            function onPlayerStateChange(event) {
                if (event.data == YT.PlayerState.PLAYING && !done) {
                    setTimeout(stopVideo, 6000);
                    done = true;
                }
            }
            function stopVideo() {
                player.stopVideo();
            }

            onYoutubeIframeAPIReady();
        </script>*@
</div>
